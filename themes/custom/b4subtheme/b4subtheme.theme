<?php
use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Utility\Html;
/**
 * @file
 * B4 subtheme theme file.
 */

function b4subtheme_hook_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    if ($form_id == 'search_form_block') {
      $form['#attributes']['class'][] = 'searchForm';
      $form['keys']['#attributes']['placeholder'] = t('Search...');
      $form['actions']['submit']['#attributes']['class'][] = '"searchForm-submit fa';
      //dpm($form);
    }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function b4subtheme_preprocess_page_title(&$variables) {

  // This won't work properly with Twig debugging enabled.
  // $title = $variables['title'];

  // Here is a safer method to get the current title.
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $titleToUse = "";
  if(is_string($title)){
    $titleToUse = $title;
  } else {
    if(is_array($title)){
      $titleToUse = $title['#markup'];
    }
    
  }

  $css_title = \Drupal\Component\Utility\Html::cleanCssIdentifier($titleToUse);
  $variables['title_attributes']['class'][] = 'page-title';
  $new_css_title = "";

  if(is_string($css_title)){
    $new_css_title .= " " . $css_title;
  } else {
    
    $nameArr = $css_title["#markup"];
    $new_css_title .= "_" . $nameArr;
    $variables['title_attributes']['class'][] = strtolower($nameArr);

  }
  
}

/**
 * Implements hook_preprocess_HOOK().
 */
function b4subtheme_preprocess_node(&$variables) {
  $new_body = $variables['content'];
  //$new_body = "<h1>Hello World</h1>" . $new_body;
  // Assign to output
  //$variables['content'] = $new_body;
}


/**
 * Implements hook_preprocess_HOOK().
 */
function b4subtheme_preprocess_html(&$variables) {

  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $titleToUse = "";
  if(is_string($title)){
    $titleToUse = $title;
  } else {
    if(is_array($title)){
      $titleToUse = $title['#markup'];
    }
  }
  $css_title = \Drupal\Component\Utility\Html::cleanCssIdentifier($titleToUse);
  if(is_string($css_title)){
    $variables['attributes']['class'][] = strtolower($css_title);
  } else {
    $new_css_title = $css_title["#markup"];
    if(is_string($new_css_title)){
      $variables['attributes']['class'][] = strtolower($new_css_title);
    } 

  }

  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $variables['term_id'] = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
  }


  $current_path = \Drupal::service('path.current')->getPath();
  $internal = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  // Assign it to body class 
  $variables['attributes']['class'][] = str_replace("/", "", $internal);


  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    /**
     * Get the term id from the 'field_page_path' taxonomy field.
     * If greater than zero, load the term and acquire the name value 
     * as a css safe value.
    */
    if($node->hasField('field_page_path')) {
      $path = $node->get('field_page_path')->value;
      
      $variables['attributes']['class'][] = 'path--' . $path;
      
    }

    /**
     * Get the node id from the node object.
     * If greater than zero, add the node id to body classes  
    */
    $nid = $node->get('nid')->value;
    if($nid > 0) {
      $variables['attributes']['class'][] = 'page--node-' . $nid;
    }
  }


}


/**
 * Implements hook_theme_suggestions_page_alter().
 */
function b4subtheme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
	  $suggestions[] = 'page__' . $node->bundle();
  }
}


