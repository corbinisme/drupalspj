<?php

/**
 * @file
 * impex module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\impex\ImpexSalutation;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\impex\impex;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Symfony\Component\HttpFoundation\Cookie;


$apiEndPoint = "";
$baseUri = "";
$accessToken = "";
$appToken = "";
$userToken = "";
$userId = "";

/**
 * Implements hook_help().
 */

function impex_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.impex':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Configure Impexium Greeting at <code>/admin/config/impex-cred-configuration</code>') . '</p>';
      return $output;

    default:
  }
}


function impex_theme() {
  return [
    'impex_block' => [
      'variables' => [
        'data' => [],
      ],
    ],
  ];
}


function impex_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add external user login validation in user_login_form
  // after ::validateAuthentication
  // and before ::validateFinal.

  $form['field_message'] = array(
    '#type' => 'item',
    '#title' => t('Impexium Login'),
    '#markup' => t('You can log in with your Impexium Credentials.'),
    '#weight' => -6,
  );


  if (@in_array('::validateFinal', $form['#validate'])) {
    $key = array_search('::validateFinal', $form['#validate']);
    $form['#validate'][$key] = 'impex_authenticate';
    $form['#validate'][] = '::validateFinal';
  }


}
function impex_get_creds($credArr=null){
        $config = \Drupal::config('impex.creds');
        
        $dat = array();
        $dat["ACCESS_END_POINT"] = $config->get("ACCESS_END_POINT");
        $dat["APP_NAME"] = $config->get("APP_NAME");
        $dat["APP_KEY"] = $config->get("APP_KEY");
        $dat["APP_ID"] = $config->get("APP_ID");
        $dat["APP_PASSWORD"] = $config->get("APP_PASSWORD");
        $dat["APP_USER_EMAIL"] = $config->get("APP_USER_EMAIL");
        $dat["APP_USER_PASSWORD"] = $config->get("APP_USER_PASSWORD");
        $dat["CURRENT_USER_EMAIL"] = $config->get("CURRENT_USER_EMAIL");
        $dat["CURRENT_USER_PASSWORD"] = $config->get("CURRENT_USER_PASSWORD");

        return $dat;

}

function impex_authenticate(array &$form, FormStateInterface $form_state) {
  if (!$form_state->get('uid')) { // Default Drupal authentication failed, so try alternative means.
    $name = $form_state->getValue('name');
    $password = trim($form_state->getValue('pass'));

    
    if ($account_data = impex_get_account_data_if_valid($name, $password)) {

      // broken here
      //dd($account_data);

      //$form_state->setErrorByName('name', t('externalauth.authmap not found'));
      $authmap = \Drupal::service('externalauth.authmap');
      $externalauth = \Drupal::service('externalauth.externalauth');
      $provider = 'impexium';

      // loginRegister will only make a new account if one does not exist.
      $account = $externalauth->loginRegister($name, $provider, $account_data);

      $form_state->set('uid', $account->id());
      //forward to Impexium for round trip SSO

    }
    else {
      // TODO: extra message for testing only.
      // regular login AND external auth failed
      $form_state->setErrorByName('name', t('External auth failed'));
    }
  }
}

function impex_getCurrentUserEmail(){
  if(\Drupal::currentUser()->id()) {

      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      
      $email = $user->get('mail')->value;
      if($email==null || $email ==""){
          $email = $user->get('name')->value;
      }

      $email = str_replace("impexium_","",$email);
      return $email;

  } else {
      return null;
  }

}


function impex_send_request( $url, $data, $customHeaders = null){ 
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    
    if ($customHeaders !== null ) {
    $headers = $customHeaders;
  }
  else { 
    $headers = [];
  }

  if ($data === null ) {
    curl_setopt( $ch, CURLOPT_CUSTOMREQUEST, "GET");
  }
  else { 
    curl_setopt( $ch , CURLOPT_CUSTOMREQUEST, "POST");
    $json = json_encode($data);
    $headers[] = 'Content-Length: ' . strlen($json);
    $headers[] = 'Content-Type: application/json; charset=utf-8';

        curl_setopt ($ch, CURLOPT_POSTFIELDS, $json);
    }
    
    curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt ( $ch, CURLOPT_HTTPHEADER, $headers);

    $ret = curl_exec($ch);
    $httpstatus = curl_getinfo($ch, CURLINFO_HTTP_CODE); # http response status code
    
    return json_decode($ret);
}




function impex_get_account_data_if_valid($name, $password) {

  $creds = impex_get_creds();
  // impexium authenticate
  $ipxemail = $name;
  $ipxpass = $password;

  //Step 1 : Get ApiEndPoint and AccessToken
  //POST api/v1/WebApiUrl
  $dataAr = array(
  'AppName' => $creds['APP_NAME'],
  'AppKey' => $creds['APP_KEY']
  );
  $data = impex_send_request($creds['ACCESS_END_POINT'], $dataAr);

  if($data!=null){
    
  $apiEndPoint = $data->uri;
  $accessToken = $data->accessToken;

  //Step 2: Get AppToken or UserToken or Both
  //POST api/v1/Signup/Authenticate
  $dataArray = array(
  'AppId' => $creds['APP_ID'],
  'AppPassword' => $creds['APP_PASSWORD'],
  'AppUserEmail' => $ipxemail,
  'AppUserPassword' => $ipxpass
  );

 
  $dat = impex_send_request($apiEndPoint, $dataArray, array(
  'accesstoken: ' . $accessToken,
  ));
 
  if($dat!=null){

  //dd($dat);
  $appToken = $dat->appToken;
  $baseUri = $dat->uri;
  $userToken = $dat->userToken;
  $userId = $dat->userId;
  $ssoPath = "/Signup/GetUserSsoToken/";


    $ssoData = array(
      'appUserEmail' => $ipxemail,
      'appUserPassword' => $ipxpass
    );
    $ssoUserdata = impex_send_request($baseUri . $ssoPath, $ssoData, array(
        'apptoken: ' . $appToken,
    ));
    $ssoToken = "";
    if($ssoUserdata){
      $ssoToken =   $ssoUserdata->ssoToken;
    }

    // get the IMPEX info for the account:
    $urlPath =  $baseUri . "/Individuals/FindBySsoToken/" . $ssoToken ."/?includeDetails=true";

    // load this into the account data
    $userdata = impex_send_request($urlPath, null, array(
      'usertoken: ' . $userToken,
      'apptoken: ' . $appToken,
    ));
    
    //dd($userdata);
    if($userdata){

      $session = \Drupal::request()->getSession();
      $session->set('usersso',  $ssoToken);

      $userinfo = $userdata->dataList[0];
      $name = $userinfo->name;
      //$pic = $userinfo->imageUri;

      
      $account_data = [
        'username' => $name,
        'name'=> $name,
        'mail' => $ipxemail,
        'pass'=> $ipxpass,
        'ssoToken'=>  $ssoToken
   
      ];
      return $account_data;
    } else {
      return FALSE;
    }
  } else {
    return FALSE;
  }
  } else {
    return FALSE;
  }

  /*
  if (some_call_to_your_authentication($name, $password)) {
    $account_data = [
      'foo' => 'bar',
    ];
    return $account_data;
  }
  */

 
}