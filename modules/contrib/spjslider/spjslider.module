<?php 

use Drupal\Core\Block\BlockBase;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
/**
 * Implements hook_theme().
 */
function spjslider_theme() {
  return [
    'slider_block' => [
      'variables' => [
        'single' => false,
        'data' => [],
        'markup'=>"",
      ],
    ],
  ];
}


function buildBanner($path){
        $data = array();

        $paths = explode("/",$path);
        $last = $paths[count($paths)-1];

        $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'slider_slide')
        ->condition('field_page_path', $last)
        ->sort('field_weight' , 'ASC'); 

            
        $ids = $query->execute();

        $nodes = Node::loadMultiple($ids);
        $isSingle = false;
        if(count($nodes)>0){
            foreach($nodes as $node){
                
                $body = $node->get('body')->value;
                $imageID = $node->get("field_slider_image")->target_id;
                $field_page_path = $node->get("field_page_path")->value;
                $order = $node->get("field_weight")->value;
                
                $file = File::load($imageID);
                if($file){
                    $file_url = $file->createFileUrl();
   
                    $temp = [
                        "image" => $file_url,
                        "body" => $body,
                        "id" => $imageID,
                        "field_page_path" => $field_page_path,
                        "order"=> $order
                    ];
                    $data[] = $temp;
                }
            }

          
        
        } else {
            // get a default one from the previous URL path level
           
            $tryPath = $paths[count($paths)-2];

            $query = \Drupal::entityQuery('node');
            $query->condition('status', 1);
            $query->condition('type', 'slider_slide');
            $query->condition('field_page_path', $tryPath);
            $ids = $query->execute();
            $nodes = Node::loadMultiple($ids);

            if(count($nodes)>0){
                foreach($nodes as $node){
                    $body = $node->get('body')->value;
                    $imageID = $node->get("field_slider_image")->target_id;
                    
                    $field_page_path = $node->get("field_page_path")->value;

                    $file = File::load($imageID);
                    $order = $node->get("field_weight")->value;
                    
                    $file_url = $file->createFileUrl();
                    $temp = [
                        "image" => $file_url,
                        "body" => $body,
                        "id" => $imageID,
                        "field_page_path" => $field_page_path,
                        "order"=>$order
                    ];
                    $data[] = $temp;
                }

            } else {

                

                    // finally get a random header that is available (i.e has)
                    $query = \Drupal::entityQuery('node');
                    $query->condition('status', 1);
                    $query->condition('type', 'slider_slide');
                    //$query->isNull('field_page_path');
                    //$query->condition('field_page_path', null);
                    $query->condition('field_page_path', NULL, 'IS NULL');
                    $ids = $query->execute();

                    
                    if(count($ids)>0){
                        $id = array_rand($ids,1);
                        shuffle($ids);
                            
                        $body="";
                        $node_details = Node::load($ids[0]);
                        $imageID = $node_details->get("field_slider_image")->target_id;

                        $field_page_path = $node_details->get("field_page_path")->value;

                        $file = File::load($imageID);
                        
                        $file_url = $file->createFileUrl();
                        $temp = [
                            "image" => $file_url,
                            "body" => $body,
                            "id" => $imageID,
                            "field_page_path" => $field_page_path,
                            "order"=>0
                        ];
                        $data[] = $temp;
                        
                    } else {
                        // then I give up. Lorem Picum them.
                        $node_details = Node::load($ids[0]);
                        $field_page_path = $node_details->get("field_page_path")->value;

                        $temp = [
                            "image" => "https://picsum.photos/1000/500",
                            "body" => "",
                            "id" => "123",
                            "field_page_path" => $field_page_path,
                            "order"=>0
                        ];
                        $data[] = $temp;
                    }
                
            }
        }
        $ret = [];
        $ret["data"] = $data;
        $ret["isSingle"] = $isSingle;
        return $ret;
    }